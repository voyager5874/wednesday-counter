{"version":3,"sources":["components/Settings.module.css","components/MainDisplay.tsx","components/Button.tsx","components/LimitValueInput.tsx","components/Settings.tsx","state/settingsReducer.ts","state/counterReducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","utils/localStorageUtils.ts","index.tsx"],"names":["module","exports","MainDisplay","props","counterState","useSelector","state","Display","error","DisplayMainValue","limitReached","counterValue","currentMax","DisplayAdditionalInfoWrapper","CurrentLimitValue","value1Label","value1","value2Label","value2","styled","div","Button","BlueButton","disabled","onClick","callback","name","button","LimitValueInput","LimitValueSetContainer","Label","label","LimitInputField","style","display","height","paddingTop","paddingBottom","currentValue","LimitValueControlsWrapper","LimitValueControlButtons","sendValueCallback","Settings","settings","visibility","visible","s","settingsVisible","settingsInvisible","SettingsWrapper","className","maxToSet","validateNewMax","minToSet","validateNewMin","iniState","toggleSettingsVisibilityAC","type","currentMin","setErrorAC","errorText","CounterWrapper","MainBoardWrapper","ControlsWrapper","App","dispatch","useDispatch","newMax","payload","keepMaxToSetAC","setTimeout","newMin","keepMinToSetAC","Boolean","counter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbc01a7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Settings_error__2UgJ3\",\"paramWrapper\":\"Settings_paramWrapper__1_Mmz\",\"settingsInvisible\":\"Settings_settingsInvisible__1dWTI\",\"settingsVisible\":\"Settings_settingsVisible__2HDEp\",\"hidden\":\"Settings_hidden__1Y4TK\",\"slowlyHide\":\"Settings_slowlyHide__1vQqa\",\"showHidden\":\"Settings_showHidden__CXo4S\"};","import React from \"react\";\nimport styled from \"styled-components\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../state/store\";\nimport {CounterStateType} from \"../state/counterReducer\";\n\ntype IndicatorPropsType = {\n    value1: number\n    value2: number\n    value1Label: string\n    value2Label: string\n\n}\nexport const MainDisplay = (props: IndicatorPropsType) => {\n    const counterState = useSelector<RootStateType, CounterStateType>(state=>state.counterState)\n    return (\n        <Display error={counterState.error}>\n            <DisplayMainValue error={counterState.error} limitReached={counterState.counterValue === counterState.currentMax}>\n                {counterState.error ? counterState.error : counterState.counterValue}\n            </DisplayMainValue>\n            <DisplayAdditionalInfoWrapper>\n                <CurrentLimitValue>{props.value1Label}: {props.value1}</CurrentLimitValue>\n                <CurrentLimitValue>{props.value2Label}: {props.value2}</CurrentLimitValue>\n            </DisplayAdditionalInfoWrapper>\n        </Display>\n\n    )\n}\n\n\ninterface DisplayProps {\n    error: string\n}\n\nconst Display = styled.div<DisplayProps>`\n  position: relative;\n  background-color: #50717b; /*for compatibility with older browsers*/\n  background-image: linear-gradient(#50717b, #8ecccc);\n  height: 100px;\n  border-radius: 10px;\n  font-size: 50px;\n  text-align: center;\n  color: #3a4042;\n  font-weight: bold;\n  /*border: 1px solid red;*/\n  display: flex;\n  flex-direction: column;\n  box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset,\n  rgba(44, 187, 99, .25) 0 1px 2px,\n  rgba(44, 187, 99, .25) 0 2px 4px,\n  rgba(44, 187, 99, .25) 0 4px 8px,\n  rgba(44, 187, 99, .25) 0 8px 16px,\n  rgba(44, 187, 99, .25) 0 16px 32px;\n  justify-content: flex-end;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: calc(100% - 4px);\n    height: 50%;\n    /*width: 300px;*/\n    background: linear-gradient(rgba(255, 255, 255, 0.8),\n    rgba(255, 255, 255, 0.2));\n    border-radius: 10px 10px 0 0;\n  }\n`\n\ninterface DisplayMainValueProps {\n    error: string\n    limitReached: boolean\n}\n\nconst DisplayMainValue = styled.div<DisplayMainValueProps>`\n  //border: 1px solid yellow;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  //align-items: flex-end;\n  align-items: ${props => props.error ? \"center\" : \"flex-end\"};\n  font-size: ${props => props.error ? \"18px\" : \"\"};\n  padding-top: ${props => props.error ? \"14px\" : \"\"};\n  color: ${props => props.limitReached || props.error ? \"rgba(180,53,53,0.6)\" : \"\"};\n`\nconst DisplayAdditionalInfoWrapper = styled.div`\n  display: flex;\n  padding: 0;\n  /*flex-direction: column;*/\n  align-items: center;\n  justify-content: center;\n  font-size: 8px;\n  /*border: 1px solid #fc0606;*/\n  /*width:100px;*/\n  /*height: 60px;*/\n`\n\nconst CurrentLimitValue = styled.div`\n  /*height: 20px;*/\n  /*border: 1px solid #a722d9;*/\n  min-width: 100px;\n  padding-bottom: 3px;\n`","import styled from \"styled-components\";\n\ntype ButtonType = {\n    name: string\n    // indicatorValue: number\n    disabled: boolean\n    callback: () => void\n}\n\nexport const Button = (props: ButtonType) => {\n    const onClickHandler = () => {\n        props.callback();\n    }\n    return (\n        <BlueButton\n            disabled={props.disabled}\n            onClick={onClickHandler}>{props.name}</BlueButton>\n    )\n}\n\n\nconst BlueButton = styled.button`\n  color: #212121;\n  font-size: 2em;\n  outline: none;\n  border: none;\n  background-color: ${props => props.disabled ? \"#505c5e\" : \"#8ecccc\"};\n  border-radius: 10px;\n  font-weight: bold;\n  height: 40px;\n  padding-left: 10px;\n  padding-right: 10px;\n  //box-shadow: 2px 2px #212121;\n  box-shadow: ${props => !props.disabled ? \"rgba(44, 187, 99, .35) 0 -25px 18px -14px inset, rgba(44, 187, 99, .25) 0 1px 2px, rgba(44, 187, 99, .25) 0 2px 4px, rgba(44, 187, 99, .25) 0 4px 8px, rgba(44, 187, 99, .25) 0 8px 16px, rgba(44, 187, 99, .25) 0 16px 32px\" : \"rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px\"};\n\n\n  &:hover {\n    background-color: ${props => !props.disabled ? \"#50717b\" : \"\"};\n  }\n\n  &:active {\n    background-color: #50717b;\n    box-shadow: 0 0 #666;\n    transform: translate(3px, 3px);\n  }\n\n`","import React from 'react';\nimport styled from \"styled-components\";\n\n\ntype LimitValueInputType = {\n    label: string\n    currentValue: number\n    sendValueCallback: (newValue: number) => void\n}\n\nexport const LimitValueInput = (props: LimitValueInputType) => {\n\n    const plusClickHandler = () => {\n        props.sendValueCallback(props.currentValue + 1)\n    }\n\n    const minusClickHandler = () => {\n        props.sendValueCallback(props.currentValue - 1)\n    }\n\n    return (\n        <LimitValueSetContainer>\n            <Label>{props.label}</Label>\n            <LimitInputField>\n                <span style={{\n                    // border: \"1px solid black\",\n                    display: \"inline-block\",\n                    height: \"100%\",\n                    paddingTop: \"10%\",\n                    paddingBottom: 0\n                }}>{props.currentValue}\n                </span>\n            </LimitInputField>\n            <LimitValueControlsWrapper>\n                <LimitValueControlButtons\n                    onClick={plusClickHandler}>+</LimitValueControlButtons>\n                <LimitValueControlButtons\n                    onClick={minusClickHandler}>-</LimitValueControlButtons>\n            </LimitValueControlsWrapper>\n        </LimitValueSetContainer>\n    );\n};\n\n\nconst LimitValueSetContainer = styled.div`\n  width: 85%;\n  color: #8ecccc;\n  font-weight: bold;\n  display: flex;\n  padding: 10px;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 10px;\n  //border: 1px solid #8ecccc;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  //flex-direction: column;\n`\n\nconst LimitValueControlsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 3px;\n`\n\nconst LimitValueControlButtons = styled.button`\n  cursor: pointer;\n  background-color: #8ecccc;\n  outline: none;\n  border: none;\n  margin: 1px;\n  width: 15px;\n  height: 15px;\n  border-radius: 3px;\n  //box-shadow: 2px 2px #212121;\n  box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset,\n  rgba(44, 187, 99, .25) 0 1px 2px,\n  rgba(44, 187, 99, .25) 0 2px 4px,\n  rgba(44, 187, 99, .25) 0 4px 8px,\n  rgba(44, 187, 99, .25) 0 8px 16px,\n  rgba(44, 187, 99, .25) 0 16px 32px;\n\n  font-weight: bold;\n  padding: 0;\n\n  &:hover {\n    background-color: #50717b;\n  }\n\n  &:active {\n    background-color: #50717b;\n    box-shadow: 0 0 #666;\n    transform: translate(1px, 1px);\n  }\n`\n\n\nconst LimitInputField = styled.div`\n  width: 60px;\n  height: 35px;\n  color: black;\n  font-size: 16px;\n  display: flex;\n  background-color: #50717b; /*for compatibility with older browsers*/\n  background-image: linear-gradient(#50717b, #8ecccc);\n  border-radius: 5px;\n  border-top: 1px solid #50717b;\n  border-left: 1px solid #50717b;\n  border-right: 1px solid #50717b;\n  //border: none;\n  font-weight: bold;\n  justify-content: center;\n  //align-items: center; //couldn't position pseudo-element in the right place so I went with some workarounds\n  outline: none;\n  box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset,\n  rgba(44, 187, 99, .25) 0 1px 2px,\n  rgba(44, 187, 99, .25) 0 2px 4px,\n  rgba(44, 187, 99, .25) 0 4px 8px,\n  rgba(44, 187, 99, .25) 0 8px 16px,\n  rgba(44, 187, 99, .25) 0 16px 32px;\n\n  &::after { //\"::\" - pseudo element, \":\" - pseudo-class\n    content: '';\n    position: absolute;\n    //top: 1px;\n    //left: 1px;\n    width: 60px;\n    height: 18px;\n    background: linear-gradient(rgba(255, 255, 255, 0.8),\n    rgba(255, 255, 255, 0.2));\n    border-radius: 5px 5px 0 0;\n  }\n`\n\nconst Label = styled.label`\n  text-shadow: 0 0 3px #fff;\n  margin-right: 40px;\n\n`\n\n","import React from 'react';\nimport s from \"./Settings.module.css\"\nimport {LimitValueInput} from \"./LimitValueInput\";\nimport styled from \"styled-components\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../state/store\";\nimport {SettingsStateType} from \"../state/settingsReducer\";\n\ntype SettingsPropsType = {\n    validateNewMax: (max: number) => void\n    validateNewMin: (min: number) => void\n}\n\nexport const Settings = (props: SettingsPropsType) => {\n    const settings = useSelector<RootStateType, SettingsStateType>(state => state.settings)\n\n    // debugger\n    let visibility = `${settings.visible ? s.settingsVisible : s.settingsInvisible}`\n\n    return (\n        <SettingsWrapper className={visibility}>\n            <LimitValueInput label={\"max value\"} currentValue={settings.maxToSet}\n                             sendValueCallback={props.validateNewMax}/>\n            <LimitValueInput label={\"min value\"} currentValue={settings.minToSet}\n                             sendValueCallback={props.validateNewMin}/>\n        </SettingsWrapper>\n    );\n};\n\n\nconst SettingsWrapper = styled.div`\n  /*position: relative;*/\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  background-color: #3a4042;\n  width: 250px;\n  heigth: 500px;\n  border: 3px solid #8ecccc;\n  border-bottom: none;\n  border-radius: 10px 10px 0 0;\n  //box-shadow: 0 4px 8px 0 rgb(33, 33, 33), 0 6px 20px 0 rgb(33, 33, 33);\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px,\n  rgba(0, 0, 0, 0.22) 0px 15px 12px;\n  /*max-height: 0;*/\n  /*overflow: hidden;*/\n`\n\n","\r\nexport type SettingsStateType = {\r\n    visible: boolean\r\n    maxToSet: number\r\n    minToSet: number\r\n}\r\n\r\nconst iniState: SettingsStateType = {\r\n    visible: false,\r\n    maxToSet: 0,\r\n    minToSet: 0,\r\n}\r\n\r\ntype GetMaxFromUserType = {\r\n    type: \"KEEP-MAX-FROM-USER\"\r\n    payload: {\r\n        newMax: number\r\n    }\r\n}\r\n\r\ntype GetMinFromUserType = {\r\n    type: \"KEEP-MIN-FROM-USER\"\r\n    payload: {\r\n        newMin: number\r\n    }\r\n}\r\n\r\ntype ToggleSettingsVisibilityActionType = {\r\n    type: \"TOGGLE-SETTINGS\"\r\n    visibility: boolean\r\n}\r\n\r\nexport type ApplySettingsActionType = {\r\n    type: \"APPLY-SETTINGS\"\r\n    maxToSet: number\r\n    minToSet: number\r\n}\r\n\r\n\r\n\r\ntype SettingsActionsType = GetMaxFromUserType | GetMinFromUserType | ToggleSettingsVisibilityActionType\r\n\r\nexport const settingsReducer = (state: SettingsStateType = iniState, action: SettingsActionsType): SettingsStateType => {\r\n    switch (action.type) {\r\n        case \"KEEP-MAX-FROM-USER\":\r\n            return {...state, maxToSet: action.payload.newMax}\r\n        case \"KEEP-MIN-FROM-USER\":\r\n            return {...state, minToSet: action.payload.newMin}\r\n        case \"TOGGLE-SETTINGS\":\r\n            return {...state, visible: action.visibility}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const keepMaxToSetAC = (newMax: number): GetMaxFromUserType=> {\r\n    return {\r\n        type: \"KEEP-MAX-FROM-USER\",\r\n        payload: {\r\n            newMax,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const keepMinToSetAC = (newMin: number): GetMinFromUserType=> {\r\n    return {\r\n        type: \"KEEP-MIN-FROM-USER\",\r\n        payload: {\r\n            newMin,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const toggleSettingsVisibilityAC = (visibility: boolean) : ToggleSettingsVisibilityActionType => {\r\n    return {\r\n        type:\"TOGGLE-SETTINGS\",\r\n        visibility,\r\n    }\r\n}\r\n\r\n//поместил этот AC сюда, хотя использую в counterReducer - думал, что здесь есть возможность прочитать\r\n// значение настроек из state и не передавать их в качестве параметров\r\nexport const applySettingsAC = (maxToSet: number, minToSet: number) : ApplySettingsActionType => {\r\n    return {\r\n        type: \"APPLY-SETTINGS\",\r\n        maxToSet,\r\n        minToSet,\r\n    } as const\r\n}\r\n","import {ApplySettingsActionType} from \"./settingsReducer\";\r\n\r\nexport type CounterStateType = {\r\n    counterValue: number\r\n    currentMax: number\r\n    currentMin: number\r\n    error: string\r\n}\r\n\r\nconst iniState: CounterStateType = {\r\n    counterValue: 0,\r\n    currentMax: 1,\r\n    currentMin: 0,\r\n    error: '',\r\n}\r\n\r\ntype IncrementActionType = {\r\n    type: \"INCREMENT\"\r\n}\r\n\r\ntype SetValueActionType = {\r\n    type: \"SET-VALUE\"\r\n    counter: number\r\n}\r\n\r\ntype ResetActionType = {\r\n    type: \"RESET\"\r\n}\r\n\r\ntype SetErrorActionType = {\r\n    type: \"SET-ERROR\"\r\n    error: string\r\n}\r\n\r\n\r\ntype CounterActionsType =\r\n    IncrementActionType\r\n    | ResetActionType\r\n    | SetErrorActionType\r\n    | ApplySettingsActionType\r\n    | SetValueActionType\r\n\r\nexport const counterReducer = (state: CounterStateType = iniState, action: CounterActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case \"SET-VALUE\":\r\n            return {...state, counterValue: action.counter}\r\n        case \"RESET\":\r\n            return {...state, counterValue: state.currentMin}\r\n        case \"SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APPLY-SETTINGS\":\r\n            return {...state, currentMin: action.minToSet, currentMax: action.maxToSet}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const setValueAC = (counterValue: number): SetValueActionType => {\r\n    return {\r\n        type: \"SET-VALUE\",\r\n        counter: counterValue,\r\n    } as const\r\n}\r\n\r\nexport const resetAC = (): ResetActionType => {\r\n    return {\r\n        type: \"RESET\"\r\n    } as const\r\n}\r\n\r\nexport const setErrorAC = (errorText: string): SetErrorActionType => {\r\n    return {\r\n        type: \"SET-ERROR\",\r\n        error: errorText,\r\n    } as const\r\n}","import React from 'react';\nimport './App.css';\nimport {MainDisplay} from \"./components/MainDisplay\";\nimport {Button} from \"./components/Button\";\nimport {Settings} from \"./components/Settings\";\nimport styled from \"styled-components\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"./state/store\";\nimport {\n    applySettingsAC,\n    keepMaxToSetAC,\n    keepMinToSetAC,\n    SettingsStateType,\n    toggleSettingsVisibilityAC\n} from \"./state/settingsReducer\";\nimport {CounterStateType, resetAC, setErrorAC, setValueAC} from \"./state/counterReducer\";\n\nfunction App() {\n    const counterState = useSelector<RootStateType, CounterStateType>(state => state.counterState)\n    const settings = useSelector<RootStateType, SettingsStateType>(state => state.settings)\n    const dispatch = useDispatch()\n\n\n     const incrementCounter = () => {\n        if (!settings.visible && counterState.counterValue < counterState.currentMax) {\n            dispatch(setErrorAC(''))\n            dispatch(setValueAC(counterState.counterValue + 1))\n        }\n        if (settings.visible) {\n            dispatch(setErrorAC('set your counter'))\n            setTimeout(() => dispatch(setErrorAC('')), 1500)\n        }\n    }\n\n    const resetCounter = () => {\n        dispatch(resetAC())\n    }\n\n    const toggleSettingsVisibility = () => {\n        if (settings.visible) {\n            dispatch(applySettingsAC(settings.maxToSet, settings.minToSet))\n            dispatch(toggleSettingsVisibilityAC(false))\n            dispatch(resetAC())\n        } else {\n            dispatch(toggleSettingsVisibilityAC(true))\n        }\n    }\n\n    const validateNewMax = (newMax: number) => {\n        if (newMax > settings.minToSet && newMax > 0) {\n            dispatch(setErrorAC(''))\n            dispatch(keepMaxToSetAC(newMax))\n\n        } else {\n            newMax <= settings.minToSet ? dispatch(setErrorAC('max must be above the min'))\n                : dispatch(setErrorAC('negative values not allowed'))\n            setTimeout(() => dispatch(setErrorAC('')), 1000)\n        }\n    }\n\n    const validateNewMin = (newMin: number) => {\n        if (newMin < settings.maxToSet && newMin >= 0) {\n            dispatch(setErrorAC(''))\n            dispatch(keepMinToSetAC(newMin))\n\n        } else {\n            newMin >= settings.maxToSet ? dispatch(setErrorAC('min must be less than the max'))\n                : dispatch(setErrorAC('negative values not allowed'))\n            setTimeout(() => dispatch(setErrorAC('')), 1000)\n        }\n    }\n\n\n    return (\n        <CounterWrapper>\n            <Settings validateNewMax={validateNewMax}\n                      validateNewMin={validateNewMin}\n            />\n            <MainBoardWrapper>\n                <MainDisplay value1={counterState.currentMax}\n                             value2={counterState.currentMin}\n                             value1Label={\"max\"}\n                             value2Label={\"start\"}/>\n                <ControlsWrapper>\n                    <Button\n                        disabled={counterState.counterValue === counterState.currentMax || Boolean(counterState.error)}\n                        name={\"inc\"}\n                        callback={incrementCounter}\n                    />\n                    <Button\n                        disabled={counterState.counterValue === counterState.currentMin || Boolean(counterState.error)}\n                        name={\"reset\"}\n                        callback={resetCounter}\n                    />\n                    <Button disabled={Boolean(counterState.error)}\n                            name={\"set\"}\n                            callback={toggleSettingsVisibility}\n                    />\n                </ControlsWrapper>\n            </MainBoardWrapper>\n        </CounterWrapper>\n\n    )\n}\n\n\nconst CounterWrapper = styled.div`\n  /*border: 2px solid black;*/\n  width: 330px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n  /*flex-wrap: wrap;*/\n  justify-content: center;\n  align-items: center;\n\n`\n\nconst MainBoardWrapper = styled.div`\n  z-index: 3;\n  width: 300px;\n  height: 200px;\n  border: 3px solid #8ecccc;\n  padding: 10px;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  background-color: #3a4042;\n  /*box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);*/\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\n`\n\nconst ControlsWrapper = styled.div`\n  border: 3px solid #8ecccc;\n  margin-top: 20px;\n  border-radius: 10px;\n  height: 40%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 10px;\n  padding-right: 10px;\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {settingsReducer} from \"./settingsReducer\";\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {loadState, saveState} from \"../utils/localStorageUtils\";\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n    counterState: counterReducer,\r\n    settings: settingsReducer,\r\n    }\r\n)\r\n\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n     saveState({\r\n         counterState: store.getState().counterState,\r\n         settings: store.getState().settings,\r\n     });\r\n });\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// {\r\n//     \"counterState\": {\r\n//     \"counterValue\": 2,\r\n//         \"currentMax\": 6,\r\n//         \"currentMin\": 2,\r\n//         \"error\": \"\"\r\n// },\r\n//     \"settings\": {\r\n//     \"visible\": false,\r\n//         \"maxToSet\": 6,\r\n//         \"minToSet\": 2\r\n// }\r\n// }","import {RootStateType} from \"../state/store\";\r\n\r\nexport const saveState = (state: RootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('counter-app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counter-app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store = {store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}